Loops

1. Loops allow you to execute a block of code multiple times, reducing repetition. A loop repeats code until a certain condition is met.

2. Types of loops:
    a. for loop
    b. while loop
    c. do-while loop
    d. break statement
    e. continue statement

a. For loop
    - Use when the number of iterations is known.
    Syntax:
    for (initialization; condition; increment/decrement) {
         // code to execute
    }

b. While loop
    - Repeats as long as the condition is true.
    - Checks the condition before each iteration.
    Syntax:
    while (condition) {
         // code to execute
    }

c. Do-while loop
    - Executes the loop body at least once before checking the condition.
    - Useful when you want the code to run at least once.
    Syntax:
    do {
         // code to execute
    } while (condition);

d. Break statement
    - Exits the loop immediately, even if the condition is still true.
    Example:
    for (int i = 1; i <= 5; i++) {
         if (i == 3) {
              break; // exits loop when i is 3
         }
         cout << i << endl;
    }

e. Continue statement
    - Skips the current iteration and continues with the next one.
    Example:
    for (int i = 1; i <= 5; i++) {
         if (i == 3) {
              continue; // skips printing when i is 3
         }
         cout << i << endl;
    }
